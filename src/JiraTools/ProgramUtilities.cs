using System;
using System.IO;
using System.Text;

namespace JiraTools
{
    /// <summary>
    /// Utility methods for the JiraTools application
    /// </summary>
    public static class ProgramUtilities
    {
        private const string DEFAULT_JIRA_URL = "https://your-company.atlassian.net";
        private const string DEFAULT_PROJECT_KEY = "PROJ"; // Default project key
        private const string COPILOT_CONTEXT_FILE_PATH = "copilot-context.md"; // Path within JiraTools directory
        private const string ENV_FILE_PATH = ".env";

        /// <summary>
        /// Initialize a Copilot context file if it doesn't exist
        /// </summary>
        public static void InitializeCopilotContextFile()
        {
            try
            {
                // Get the absolute path for the context file within the JiraTools folder
                var currentDirectory = Directory.GetCurrentDirectory();
                var contextFilePath = Path.Combine(currentDirectory, COPILOT_CONTEXT_FILE_PATH);

                if (!File.Exists(contextFilePath))
                {
                    Console.WriteLine("‚ö†Ô∏è  IMPORTANT: Installing JiraTools for the first time");
                    Console.WriteLine("üìñ AGENTS: Please read the copilot-context.md file for usage guidance and tool capabilities");

                    // Create the Copilot context schema with optimized structure for AI
                    var contextContent = new StringBuilder();
                    contextContent.AppendLine("# COPILOT CONTEXT FILE - DO NOT MODIFY");
                    contextContent.AppendLine("# This file is automatically generated for GitHub Copilot's use only.");
                    contextContent.AppendLine("# It is not intended for developer use or modification.");
                    contextContent.AppendLine();
                    contextContent.AppendLine("## MARKDOWN_FILE_TRACKING");
                    contextContent.AppendLine();
                    contextContent.AppendLine("```json");
                    contextContent.AppendLine("[");
                    contextContent.AppendLine("  {");
                    contextContent.AppendLine("    \"file_path\": \"/path/to/your/project/docs/status.md\",");
                    contextContent.AppendLine("    \"project_dir\": \"/path/to/your/project/jiratools\",");
                    contextContent.AppendLine("    \"purpose\": \"Project status tracking\",");
                    contextContent.AppendLine("    \"last_updated\": \"" + DateTime.Now.ToString("yyyy-MM-dd") + "\"");
                    contextContent.AppendLine("  }");
                    contextContent.AppendLine("]");
                    contextContent.AppendLine("```");
                    contextContent.AppendLine();
                    contextContent.AppendLine("## FEATURE_REQUESTS");
                    contextContent.AppendLine();
                    contextContent.AppendLine("```json");
                    contextContent.AppendLine("[");
                    contextContent.AppendLine("  {");
                    contextContent.AppendLine("    \"id\": \"FR001\",");
                    contextContent.AppendLine("    \"description\": \"Add comments support to the JiraTools utility\",");
                    contextContent.AppendLine("    \"status\": \"pending\",");
                    contextContent.AppendLine("    \"requested_date\": \"" + DateTime.Now.ToString("yyyy-MM-dd") + "\"");
                    contextContent.AppendLine("  }");
                    contextContent.AppendLine("]");
                    contextContent.AppendLine("```");

                    // Write the content to the file
                    File.WriteAllText(contextFilePath, contextContent.ToString());
                    Console.WriteLine($"‚úÖ Copilot context file created: {contextFilePath}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Warning: Failed to initialize Copilot context file: {ex.Message}");
                // Non-fatal error, continue with the program
            }
        }

        /// <summary>
        /// Parse command line arguments into a CommandLineOptions object
        /// </summary>
        public static CommandLineOptions ParseCommandLineArgs(string[] args)
        {
            var options = new CommandLineOptions
            {
                JiraUrl = DEFAULT_JIRA_URL,
                ProjectKey = DEFAULT_PROJECT_KEY,
                IssueType = "Task",
                MappingFile = "jira_tasks.map"
            };

            if (args.Length == 0)
            {
                options.ShowHelp = true;
                return options;
            }

            // Check if the first argument is a help flag
            if (args[0].ToLower() == "--help" || args[0].ToLower() == "-h")
            {
                options.ShowHelp = true;
                return options;
            }

            options.Command = args[0].ToLower();

            for (int i = 1; i < args.Length; i++)
            {
                switch (args[i].ToLower())
                {
                    case "--help":
                    case "-h":
                        options.ShowHelp = true;
                        break;
                    case "--url":
                        if (i + 1 < args.Length) options.JiraUrl = args[++i];
                        break;
                    case "--user":
                    case "--username":
                        if (i + 1 < args.Length) options.Username = args[++i];
                        break;
                    case "--token":
                    case "--api-token":
                        if (i + 1 < args.Length) options.ApiToken = args[++i];
                        break;
                    case "--project":
                        if (i + 1 < args.Length) options.ProjectKey = args[++i];
                        break;
                    case "--issue":
                    case "--issue-key":
                    case "--key":
                        if (i + 1 < args.Length) options.IssueKey = args[++i];
                        break;
                    case "--type":
                        if (i + 1 < args.Length) options.IssueType = args[++i];
                        break;
                    case "--summary":
                        if (i + 1 < args.Length) options.Summary = args[++i];
                        break;
                    case "--description":
                    case "--desc":
                        if (i + 1 < args.Length) options.Description = args[++i];
                        break;
                    case "--comment":
                        if (i + 1 < args.Length) options.Comment = args[++i];
                        break;
                    case "--components":
                        if (i + 1 < args.Length) options.Components = args[++i];
                        break;
                    case "--transition":
                    case "--status":
                    case "--target":
                        if (i + 1 < args.Length) options.TransitionName = args[++i];
                        break;
                    case "--parent":
                        options.LinkToParent = true;
                        break;
                    case "--parent-task":
                        if (i + 1 < args.Length)
                        {
                            options.ParentTask = args[++i];
                            options.LinkToParent = true;
                        }
                        break;
                    case "--list-only":
                    case "--list":
                        options.ListOnly = true;
                        break;
                    case "--verbose":
                        // Verbose flag is recognized but currently doesn't do anything
                        break;
                    case "--yes":
                    case "-y":
                        options.SkipConfirmation = true;
                        break;
                    case "--non-interactive":
                    case "--auto":
                        options.NonInteractive = true;
                        options.SkipConfirmation = true; // Non-interactive mode implies skipping confirmation
                        break;
                }
            }

            return options;
        }

        /// <summary>
        /// Load credentials and configuration from the .env file
        /// </summary>
        public static void LoadCredentialsFromEnvFile(CommandLineOptions options)
        {
            if (!File.Exists(ENV_FILE_PATH))
            {
                Console.WriteLine($"Warning: .env file not found at {ENV_FILE_PATH}");
                return;
            }

            var lines = File.ReadAllLines(ENV_FILE_PATH);
            foreach (var line in lines)
            {
                if (line.StartsWith("#") || string.IsNullOrWhiteSpace(line))
                    continue; // Skip comments and empty lines

                var parts = line.Split(new char[] { '=' }, 2);
                if (parts.Length != 2)
                    continue; // Invalid line format

                var key = parts[0].Trim();
                var value = parts[1].Trim().Trim('"');

                switch (key.ToLower())
                {
                    case "jira_url":
                        options.JiraUrl = value;
                        break;
                    case "username":
                    case "jira_username":
                        options.Username = value;
                        break;
                    case "api_token":
                    case "jira_api_token":
                        options.ApiToken = value;
                        break;
                    case "project_key":
                    case "jira_project_key":
                        options.ProjectKey = value;
                        break;
                    case "default_component":
                    case "jira_default_component":
                        options.DefaultComponent = value;
                        if (!string.IsNullOrEmpty(options.DefaultComponent) && string.IsNullOrEmpty(options.Components))
                        {
                            options.Components = options.DefaultComponent;
                            Console.WriteLine($"Using default component from environment: {options.DefaultComponent}");
                        }
                        break;
                    case "epic_key":
                        options.EpicKey = value;
                        break;
                    case "issue_key":
                        options.IssueKey = value;
                        break;
                    case "issue_type":
                        options.IssueType = value;
                        break;
                    case "summary":
                        options.Summary = value;
                        break;
                    case "description":
                        options.Description = value;
                        break;
                    case "comment":
                        options.Comment = value;
                        break;
                    case "components":
                        options.Components = value;
                        break;
                    case "transition_name":
                        options.TransitionName = value;
                        break;
                    case "mapping_file":
                        options.MappingFile = value;
                        break;
                    case "status_doc_path":
                        options.StatusDocPath = value;
                        break;
                    case "link_to_parent":
                        options.LinkToParent = value.Equals("true", StringComparison.OrdinalIgnoreCase);
                        break;
                    case "parent_task":
                    case "jira_parent_task":
                        options.ParentTask = value;
                        break;
                }
            }
        }

        /// <summary>
        /// Read masked input (for passwords/tokens)
        /// </summary>
        public static string ReadMaskedInput()
        {
            var input = string.Empty;
            ConsoleKeyInfo key;

            do
            {
                key = Console.ReadKey(true);

                if (key.Key != ConsoleKey.Backspace && key.Key != ConsoleKey.Enter)
                {
                    input += key.KeyChar;
                    Console.Write("*");
                }
                else if (key.Key == ConsoleKey.Backspace && input.Length > 0)
                {
                    input = input.Substring(0, input.Length - 1);
                    Console.Write("\b \b");
                }
            }
            while (key.Key != ConsoleKey.Enter);

            return input;
        }

        /// <summary>
        /// Prompt for credentials if they're missing
        /// </summary>
        public static void PromptForCredentials(CommandLineOptions options)
        {
            if (string.IsNullOrEmpty(options.Username) || string.IsNullOrEmpty(options.ApiToken))
            {
                if (options.NonInteractive)
                {
                    throw new InvalidOperationException("Credentials are required but not provided in non-interactive mode.");
                }

                Console.WriteLine("Jira API credentials are required.");

                if (string.IsNullOrEmpty(options.Username))
                {
                    Console.Write("Enter your Jira username (email address): ");
                    options.Username = Console.ReadLine();
                }

                if (string.IsNullOrEmpty(options.ApiToken))
                {
                    Console.WriteLine("Enter your Jira API token (generate one at https://id.atlassian.com/manage-profile/security/api-tokens):");
                    options.ApiToken = ReadMaskedInput();
                    Console.WriteLine();
                }
            }
            else
            {
                Console.WriteLine($"Using credentials for {options.Username} from .env file");
            }
        }
    }
}
