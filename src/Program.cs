using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using Newtonsoft.Json;

namespace JiraTools
{
    class Program
    {
        // Default values - will be overridden by .env file if present
        private const string DEFAULT_JIRA_URL = "https://n-able.atlassian.net";
        private const string DEFAULT_PROJECT_KEY = "NCCF"; // N-Central Default
        private const string PARENT_TASK = "NCCF-741626"; // Parent task for the work
        private const string ENV_FILE_PATH = ".env";
        private const string COPILOT_CONTEXT_FILE_PATH = "copilot-context.md"; // Path within JiraTools directory

        static async Task Main(string[] args)
        {
            try
            {
                // Initialize Copilot context file if it doesn't exist
                InitializeCopilotContextFile();

                // Parse command line args or use interactive mode
                var options = ParseCommandLineArgs(args);

                if (options.ShowHelp)
                {
                    ShowHelp();
                    return;
                }

                // Try to load credentials from .env file first
                LoadCredentialsFromEnvFile(options);

                // If we're still missing required credentials, prompt for them
                if (string.IsNullOrEmpty(options.Username) || string.IsNullOrEmpty(options.ApiToken))
                {
                    Console.WriteLine("Jira API credentials are required.");

                    if (string.IsNullOrEmpty(options.Username))
                    {
                        Console.Write("Enter your Jira username (email address): ");
                        options.Username = Console.ReadLine();
                    }

                    if (string.IsNullOrEmpty(options.ApiToken))
                    {
                        Console.WriteLine("Enter your Jira API token (generate one at https://id.atlassian.com/manage-profile/security/api-tokens):");
                        options.ApiToken = ReadMaskedInput();
                        Console.WriteLine();
                    }
                }
                else
                {
                    Console.WriteLine($"Using credentials for {options.Username} from .env file");
                }

                // Initialize the generic Jira client
                var jiraClient = new JiraClient(
                    options.JiraUrl,
                    options.Username,
                    options.ApiToken
                );

                switch (options.Command)
                {
                    case "create-task":
                        await CreateTask(jiraClient, options);
                        break;
                    case "update-task":
                        await UpdateTask(jiraClient, options);
                        break;
                    case "add-comment":
                        await AddComment(jiraClient, options);
                        break;
                    case "comment-task":
                        await CommentOnTaskInDocument(jiraClient, options);
                        break;
                    case "transition":
                        await TransitionTask(jiraClient, options);
                        break;
                    default:
                        Console.WriteLine("Unknown command. Use --help for usage information.");
                        break;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error: {ex.Message}");
                Console.WriteLine(ex.StackTrace);
            }
        }

        /// <summary>
        /// Initializes a Copilot context file if it doesn't exist.
        /// This file is used by GitHub Copilot for maintaining context between sessions.
        /// </summary>
        private static void InitializeCopilotContextFile()
        {
            try
            {
                // Get the absolute path for the context file within the JiraTools folder
                var currentDirectory = Directory.GetCurrentDirectory();
                var contextFilePath = Path.Combine(currentDirectory, COPILOT_CONTEXT_FILE_PATH);

                if (!File.Exists(contextFilePath))
                {
                    Console.WriteLine("Initializing Copilot context file...");

                    // Create the Copilot context schema with optimized structure for AI
                    var contextContent = new StringBuilder();
                    contextContent.AppendLine("# COPILOT CONTEXT FILE - DO NOT MODIFY");
                    contextContent.AppendLine("# This file is automatically generated for GitHub Copilot's use only.");
                    contextContent.AppendLine("# It is not intended for developer use or modification.");
                    contextContent.AppendLine();
                    contextContent.AppendLine("## MARKDOWN_FILE_TRACKING");
                    contextContent.AppendLine();
                    contextContent.AppendLine("```json");
                    contextContent.AppendLine("[");
                    contextContent.AppendLine("  {");
                    contextContent.AppendLine("    \"file_path\": \"/Users/peterlockett/Documents/Projects/n-central-win-agent/docs/quartz_migration_status.md\",");
                    contextContent.AppendLine("    \"project_dir\": \"/Users/peterlockett/Documents/Projects/n-central-win-agent/dev-assist/JiraTools\",");
                    contextContent.AppendLine("    \"purpose\": \"Quartz migration status tracking\",");
                    contextContent.AppendLine("    \"last_updated\": \"" + DateTime.Now.ToString("yyyy-MM-dd") + "\"");
                    contextContent.AppendLine("  }");
                    contextContent.AppendLine("]");
                    contextContent.AppendLine("```");
                    contextContent.AppendLine();
                    contextContent.AppendLine("## FEATURE_REQUESTS");
                    contextContent.AppendLine();
                    contextContent.AppendLine("```json");
                    contextContent.AppendLine("[");
                    contextContent.AppendLine("  {");
                    contextContent.AppendLine("    \"id\": \"FR001\",");
                    contextContent.AppendLine("    \"description\": \"Add comments support to the JiraTools utility\",");
                    contextContent.AppendLine("    \"status\": \"pending\",");
                    contextContent.AppendLine("    \"requested_date\": \"" + DateTime.Now.ToString("yyyy-MM-dd") + "\"");
                    contextContent.AppendLine("  }");
                    contextContent.AppendLine("]");
                    contextContent.AppendLine("```");

                    // Write the content to the file
                    File.WriteAllText(contextFilePath, contextContent.ToString());
                    Console.WriteLine($"Copilot context file initialized at: {contextFilePath}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Warning: Failed to initialize Copilot context file: {ex.Message}");
                // Non-fatal error, continue with the program
            }
        }

        private static async Task CreateTask(JiraClient jiraClient, CommandLineOptions options)
        {
            // Get required fields for this project and issue type
            Console.WriteLine("Checking for required fields...");
            var requiredFields = await jiraClient.GetRequiredFieldsAsync(options.ProjectKey, options.IssueType ?? "Task");

            if (requiredFields.Count > 0)
            {
                Console.WriteLine("Required fields for this issue type:");
                foreach (var field in requiredFields)
                {
                    Console.WriteLine($"- {field.Value} ({field.Key})");
                }
            }

            // Check if the Work Classification field is required
            string workClassificationFieldId = "customfield_18333"; // From the error message
            if (requiredFields.ContainsKey(workClassificationFieldId) && string.IsNullOrEmpty(options.WorkClassification))
            {
                // Get allowed values for Work Classification
                var allowedValues = await jiraClient.GetAllowedValuesForFieldAsync(
                    options.ProjectKey,
                    options.IssueType ?? "Task",
                    workClassificationFieldId
                );

                Console.WriteLine($"\nWork Classification is required. Allowed values:");
                int index = 1;
                foreach (var value in allowedValues)
                {
                    Console.WriteLine($"{index}. {value}");
                    index++;
                }

                Console.Write("\nSelect Work Classification (enter number): ");
                if (int.TryParse(Console.ReadLine(), out int selection) && selection > 0 && selection <= allowedValues.Count)
                {
                    options.WorkClassification = allowedValues[selection - 1];
                    Console.WriteLine($"Selected: {options.WorkClassification}");
                }
                else
                {
                    Console.WriteLine("Invalid selection. Using default 'Maintenance'");
                    options.WorkClassification = "Maintenance";
                }
            }

            // Get available components for the project
            Console.WriteLine($"Fetching available components for project {options.ProjectKey}...");
            var availableComponents = await jiraClient.GetAvailableComponentsAsync(options.ProjectKey);

            // Display available components
            if (availableComponents.Count > 0)
            {
                Console.WriteLine("\nAvailable components:");
                int index = 1;
                var componentsList = new List<string>(availableComponents.Keys);
                foreach (var component in componentsList)
                {
                    Console.WriteLine($"{index}. {component}");
                    index++;
                }
            }
            else
            {
                Console.WriteLine("No components available for this project or you don't have permission to view them.");
            }

            // Process requested components
            List<string> validComponents = new List<string>();
            if (!string.IsNullOrEmpty(options.Components))
            {
                string[] requestedComponents = options.Components.Split(',');
                foreach (var component in requestedComponents)
                {
                    string trimmedComponent = component.Trim();
                    if (availableComponents.ContainsKey(trimmedComponent))
                    {
                        validComponents.Add(trimmedComponent);
                    }
                    else
                    {
                        Console.WriteLine($"Warning: Component '{trimmedComponent}' is not available in project {options.ProjectKey}. Skipping.");
                    }
                }
            }

            if (validComponents.Count == 0 && !string.IsNullOrEmpty(options.Components))
            {
                Console.WriteLine("No valid components were found. You can specify components by number:");
                Console.Write("Enter component numbers (comma-separated, e.g., '1,3'): ");
                string input = Console.ReadLine();
                if (!string.IsNullOrEmpty(input))
                {
                    string[] selections = input.Split(',');
                    var componentsList = new List<string>(availableComponents.Keys);
                    foreach (var selection in selections)
                    {
                        if (int.TryParse(selection.Trim(), out int selectedIndex) &&
                            selectedIndex > 0 && selectedIndex <= componentsList.Count)
                        {
                            validComponents.Add(componentsList[selectedIndex - 1]);
                        }
                    }
                }
            }

            if (string.IsNullOrEmpty(options.Summary))
            {
                Console.Write("Enter task summary: ");
                options.Summary = Console.ReadLine();
            }

            if (string.IsNullOrEmpty(options.Description))
            {
                Console.Write("Enter task description (press Enter twice to finish): ");
                var description = new List<string>();
                string line;
                while (!string.IsNullOrEmpty(line = Console.ReadLine()))
                {
                    description.Add(line);
                }
                options.Description = string.Join("\n", description);
            }

            // Prepare the fields dictionary
            var fields = new Dictionary<string, object>
            {
                { "project", new { key = options.ProjectKey } },
                { "summary", options.Summary },
                { "description", options.Description },
                { "issuetype", new { name = options.IssueType ?? "Task" } }
            };

            // Add Work Classification if set
            if (!string.IsNullOrEmpty(options.WorkClassification))
            {
                fields[workClassificationFieldId] = new { value = options.WorkClassification };
            }

            // Add components if we have valid ones
            if (validComponents.Count > 0)
            {
                var componentsList = new List<object>();
                foreach (var component in validComponents)
                {
                    componentsList.Add(new { name = component });
                }
                fields["components"] = componentsList;
                Console.WriteLine($"Adding components: {string.Join(", ", validComponents)}");
            }

            // Create the issue
            try
            {
                var url = $"{options.JiraUrl}/rest/api/2/issue";
                var requestBody = new { fields };
                var json = JsonConvert.SerializeObject(requestBody);
                Console.WriteLine($"Sending request: {json}");

                // Create the request body
                var content = new StringContent(json, Encoding.UTF8, "application/json");

                // Set up authentication
                var authValue = Convert.ToBase64String(Encoding.ASCII.GetBytes($"{options.Username}:{options.ApiToken}"));
                using (var httpClient = new HttpClient())
                {
                    httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Basic", authValue);
                    httpClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

                    // Send the request
                    var response = await httpClient.PostAsync(url, content);
                    var responseContent = await response.Content.ReadAsStringAsync();

                    if (!response.IsSuccessStatusCode)
                    {
                        Console.WriteLine($"Error creating Jira issue: {response.StatusCode} - {responseContent}");
                        return;
                    }

                    // Parse the response to get the issue key
                    dynamic responseObj = JsonConvert.DeserializeObject(responseContent);
                    string issueKey = responseObj.key;

                    Console.WriteLine($"Created issue: {options.JiraUrl}/browse/{issueKey}");

                    // Link to parent task if needed
                    if (options.LinkToParent && !string.IsNullOrEmpty(PARENT_TASK))
                    {
                        Console.WriteLine($"Linking to parent task {PARENT_TASK}...");
                        bool linked = false;

                        try
                        {
                            // First try to create a "Relates to" link
                            linked = await jiraClient.CreateIssueLinkAsync(issueKey, PARENT_TASK, "Relates");

                            if (linked)
                            {
                                Console.WriteLine($"Successfully linked issue to parent {PARENT_TASK}");
                            }
                            else
                            {
                                // If that fails, try to set as a subtask (which may or may not work depending on issue types)
                                Console.WriteLine("Failed to create standard link, trying subtask relationship...");
                                linked = await jiraClient.SetParentTaskAsync(issueKey, PARENT_TASK);

                                if (linked)
                                {
                                    Console.WriteLine($"Successfully set {issueKey} as subtask of {PARENT_TASK}");
                                }
                                else
                                {
                                    Console.WriteLine($"Warning: Could not link task to parent {PARENT_TASK}");
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine($"Error linking tasks: {ex.Message}");
                        }

                        Console.WriteLine($"Parent URL: {options.JiraUrl}/browse/{PARENT_TASK}");
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error creating task: {ex.Message}");
            }
        }

        private static async Task UpdateTask(JiraClient jiraClient, CommandLineOptions options)
        {
            if (string.IsNullOrEmpty(options.IssueKey))
            {
                Console.Write("Enter issue key (e.g., NCCF-12345): ");
                options.IssueKey = Console.ReadLine();
            }

            var fields = new Dictionary<string, object>();

            if (!string.IsNullOrEmpty(options.Summary))
            {
                fields["summary"] = options.Summary;
            }

            if (!string.IsNullOrEmpty(options.Description))
            {
                fields["description"] = options.Description;
            }

            await jiraClient.UpdateIssueAsync(options.IssueKey, fields);

            Console.WriteLine($"Updated issue: {options.JiraUrl}/browse/{options.IssueKey}");
        }

        private static async Task AddComment(JiraClient jiraClient, CommandLineOptions options)
        {
            if (string.IsNullOrEmpty(options.IssueKey))
            {
                Console.Write("Enter issue key (e.g., NCCF-12345): ");
                options.IssueKey = Console.ReadLine();
            }

            if (string.IsNullOrEmpty(options.Comment))
            {
                Console.Write("Enter comment (press Enter twice to finish): ");
                var comment = new List<string>();
                string line;
                while (!string.IsNullOrEmpty(line = Console.ReadLine()))
                {
                    comment.Add(line);
                }
                options.Comment = string.Join("\n", comment);
            }

            await jiraClient.AddCommentAsync(options.IssueKey, options.Comment);

            Console.WriteLine($"Added comment to issue: {options.JiraUrl}/browse/{options.IssueKey}");
        }

        private static async Task TransitionTask(JiraClient jiraClient, CommandLineOptions options)
        {
            try
            {
                if (string.IsNullOrEmpty(options.IssueKey))
                {
                    Console.Error.WriteLine("ERROR: Issue key is required. Use --issue-key parameter.");
                    return;
                }

                // Get the current status of the issue
                string currentStatus;
                try
                {
                    currentStatus = await jiraClient.GetIssueStatusAsync(options.IssueKey);
                    Console.WriteLine($"Current status of {options.IssueKey}: {currentStatus}");
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine($"ERROR: Failed to get current status of {options.IssueKey}: {ex.Message}");
                    return;
                }

                // Get available transitions
                Dictionary<string, string> transitions;
                try
                {
                    transitions = await jiraClient.GetAvailableTransitionsAsync(options.IssueKey);

                    if (transitions.Count == 0)
                    {
                        Console.WriteLine($"No transitions available for issue {options.IssueKey} in its current status ({currentStatus}).");
                        return;
                    }

                    Console.WriteLine($"Available transitions for {options.IssueKey}:");
                    int index = 1;
                    var transitionList = transitions.Keys.ToList();
                    foreach (var transition in transitionList)
                    {
                        Console.WriteLine($"{index}. {transition}");
                        index++;
                    }
                }
                catch (Exception ex)
                {
                    Console.Error.WriteLine($"ERROR: Failed to get available transitions for {options.IssueKey}: {ex.Message}");
                    return;
                }

                // If user specified --list-only, exit here after showing available transitions
                if (options.ListOnly)
                {
                    return;
                }

                bool transitionSuccessful = false;
                int retryAttempts = 0;
                const int maxRetries = 3;
                var availableTransitions = transitions.Keys.ToList();

                while (!transitionSuccessful && retryAttempts < maxRetries)
                {
                    string transitionName = options.TransitionName;

                    // If transition name wasn't provided via command line or we're retrying
                    if (string.IsNullOrEmpty(transitionName) || retryAttempts > 0)
                    {
                        if (options.NonInteractive)
                        {
                            // In non-interactive mode, just use the first available transition
                            if (transitions.Count > 0)
                            {
                                transitionName = transitions.First().Key;
                                Console.WriteLine($"Non-interactive mode: Selected transition '{transitionName}'");
                            }
                            else
                            {
                                Console.Error.WriteLine("ERROR: No transition name specified and no transitions available.");
                                return;
                            }
                        }
                        else
                        {
                            // Interactive mode - allow selection by number or name
                            Console.WriteLine("Enter transition number or name (or press Enter to exit): ");
                            string input = Console.ReadLine();

                            if (string.IsNullOrEmpty(input))
                            {
                                Console.WriteLine("No transition specified. Exiting.");
                                return;
                            }

                            // Try to parse as index first
                            if (int.TryParse(input, out int selectedIndex) && selectedIndex > 0 && selectedIndex <= availableTransitions.Count)
                            {
                                transitionName = availableTransitions[selectedIndex - 1];
                                Console.WriteLine($"Selected transition: {transitionName}");
                            }
                            else
                            {
                                // Use input as transition name
                                transitionName = input.Trim();
                            }
                        }
                    }

                    // Check if the transition name is valid
                    if (transitions.TryGetValue(transitionName, out var transitionId))
                    {
                        // Ask for confirmation before executing the transition
                        bool proceedWithTransition = true;

                        if (retryAttempts == 0 && !options.SkipConfirmation && !options.NonInteractive)
                        {
                            Console.WriteLine($"Are you sure you want to transition {options.IssueKey} from '{currentStatus}' to '{transitionName}'? (y/n): ");
                            string confirmation = Console.ReadLine()?.ToLower() ?? "n";

                            if (confirmation != "y" && confirmation != "yes")
                            {
                                Console.WriteLine("Transition cancelled by user.");
                                proceedWithTransition = false;
                            }
                        }

                        if (proceedWithTransition)
                        {
                            try
                            {
                                await jiraClient.TransitionIssueAsync(options.IssueKey, transitionId);
                                Console.WriteLine($"Successfully transitioned issue {options.IssueKey} from '{currentStatus}' to '{transitionName}'");
                                Console.WriteLine($"View issue at: {options.JiraUrl}/browse/{options.IssueKey}");
                                transitionSuccessful = true;

                                // Get the new status to confirm the transition worked
                                string newStatus = await jiraClient.GetIssueStatusAsync(options.IssueKey);
                                Console.WriteLine($"New status of {options.IssueKey}: {newStatus}");

                                // Only show follow-up options in interactive mode
                                if (!options.NonInteractive)
                                {
                                    // Show new available transitions
                                    var newTransitions = await jiraClient.GetAvailableTransitionsAsync(options.IssueKey);

                                    if (newTransitions.Count > 0)
                                    {
                                        Console.WriteLine($"Available transitions now:");
                                        int idx = 1;
                                        var newTransitionList = newTransitions.Keys.ToList();
                                        foreach (var transition in newTransitionList)
                                        {
                                            Console.WriteLine($"{idx}. {transition}");
                                            idx++;
                                        }

                                        Console.WriteLine("Do you want to apply another transition? (y/n): ");
                                        string anotherTransition = Console.ReadLine()?.ToLower() ?? "n";

                                        if (anotherTransition == "y" || anotherTransition == "yes")
                                        {
                                            transitions = newTransitions;
                                            availableTransitions = newTransitionList;
                                            currentStatus = newStatus;
                                            retryAttempts = 0;
                                            options.TransitionName = null; // Clear previous transition name
                                            transitionSuccessful = false; // Reset flag to continue the loop
                                            continue;
                                        }
                                    }
                                    else
                                    {
                                        Console.WriteLine("No further transitions available.");
                                    }
                                }
                            }
                            catch (Exception ex)
                            {
                                Console.Error.WriteLine($"ERROR performing transition: {ex.Message}");
                                Console.WriteLine("Here are the available transitions:");
                                for (int i = 0; i < availableTransitions.Count; i++)
                                {
                                    Console.WriteLine($"{i + 1}. {availableTransitions[i]}");
                                }

                                // Always prompt for another attempt without increasing retry counter
                                // This prevents the workflow from being interrupted due to errors
                                Console.WriteLine("Would you like to try a different transition? (y/n): ");
                                string tryAgain = Console.ReadLine()?.ToLower() ?? "n";

                                if (tryAgain == "y" || tryAgain == "yes")
                                {
                                    options.TransitionName = null; // Clear previous transition name to prompt for a new one
                                    // Don't increment retryAttempts here to allow the user to keep trying without limits
                                }
                                else
                                {
                                    return;
                                }
                            }
                        }
                        else
                        {
                            // User cancelled the transition, but we should allow another attempt
                            Console.WriteLine("Would you like to try a different transition? (y/n): ");
                            string tryAnother = Console.ReadLine()?.ToLower() ?? "n";

                            if (tryAnother == "y" || tryAnother == "yes")
                            {
                                options.TransitionName = null; // Clear previous transition name
                            }
                            else
                            {
                                return;
                            }
                        }
                    }
                    else
                    {
                        Console.Error.WriteLine($"ERROR: Could not find transition '{transitionName}'. Here are the available transitions:");
                        for (int i = 0; i < availableTransitions.Count; i++)
                        {
                            Console.WriteLine($"{i + 1}. {availableTransitions[i]}");
                        }

                        if (options.NonInteractive)
                        {
                            // In non-interactive mode, just fail
                            return;
                        }

                        Console.WriteLine("Please select a valid transition number or name: ");
                        string selection = Console.ReadLine();

                        if (string.IsNullOrEmpty(selection))
                        {
                            Console.WriteLine("No selection made. Exiting.");
                            return;
                        }

                        // Try to parse as index
                        if (int.TryParse(selection, out int idx) && idx > 0 && idx <= availableTransitions.Count)
                        {
                            options.TransitionName = availableTransitions[idx - 1];
                            Console.WriteLine($"Selected transition: {options.TransitionName}");
                        }
                        else
                        {
                            // Use input directly
                            options.TransitionName = selection.Trim();
                        }

                        // Don't increment retryAttempts here to allow unlimited attempts to get the transition right
                    }
                }

                if (!transitionSuccessful && retryAttempts >= maxRetries)
                {
                    Console.Error.WriteLine($"ERROR: Failed to transition issue {options.IssueKey} after {maxRetries} attempts.");
                }
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"ERROR in TransitionTask: {ex.Message}");
                Console.Error.WriteLine(ex.StackTrace);
            }
        }

        // Helper functions

        private static Dictionary<string, string> LoadTaskMapping(string filePath)
        {
            var result = new Dictionary<string, string>();

            foreach (var line in File.ReadAllLines(filePath))
            {
                var parts = line.Split(new[] { '=' }, 2);
                if (parts.Length == 2)
                {
                    result[parts[0]] = parts[1];
                }
            }

            return result;
        }

        private static void SaveTaskMapping(Dictionary<string, string> tasks, string filePath)
        {
            var lines = new List<string>();

            foreach (var task in tasks)
            {
                lines.Add($"{task.Key}={task.Value}");
            }

            File.WriteAllLines(filePath, lines);
        }

        private static string ReadPassword()
        {
            var password = string.Empty;
            ConsoleKeyInfo key;

            do
            {
                key = Console.ReadKey(true);

                // Ignore control keys like Backspace
                if (key.Key != ConsoleKey.Backspace && key.Key != ConsoleKey.Enter)
                {
                    password += key.KeyChar;
                    Console.Write("*");
                }
                else if (key.Key == ConsoleKey.Backspace && password.Length > 0)
                {
                    password = password.Substring(0, password.Length - 1);
                    Console.Write("\b \b");
                }
            }
            while (key.Key != ConsoleKey.Enter);

            return password;
        }

        private static string ReadMaskedInput()
        {
            var input = string.Empty;
            ConsoleKeyInfo key;

            do
            {
                key = Console.ReadKey(true);

                // Ignore control keys like Backspace
                if (key.Key != ConsoleKey.Backspace && key.Key != ConsoleKey.Enter)
                {
                    input += key.KeyChar;
                    Console.Write("*");
                }
                else if (key.Key == ConsoleKey.Backspace && input.Length > 0)
                {
                    input = input.Substring(0, input.Length - 1);
                    Console.Write("\b \b");
                }
            }
            while (key.Key != ConsoleKey.Enter);

            return input;
        }

        private static CommandLineOptions ParseCommandLineArgs(string[] args)
        {
            var options = new CommandLineOptions
            {
                JiraUrl = DEFAULT_JIRA_URL,
                ProjectKey = DEFAULT_PROJECT_KEY,
                IssueType = "Task",
                MappingFile = "jira_tasks.map"
            };

            if (args.Length == 0)
            {
                options.ShowHelp = true;
                return options;
            }

            options.Command = args[0].ToLower();

            for (int i = 1; i < args.Length; i++)
            {
                switch (args[i].ToLower())
                {
                    case "--help":
                    case "-h":
                        options.ShowHelp = true;
                        break;
                    case "--url":
                        if (i + 1 < args.Length) options.JiraUrl = args[++i];
                        break;
                    case "--user":
                    case "--username":
                        if (i + 1 < args.Length) options.Username = args[++i];
                        break;
                    case "--token":
                    case "--api-token":
                        if (i + 1 < args.Length) options.ApiToken = args[++i];
                        break;
                    case "--project":
                        if (i + 1 < args.Length) options.ProjectKey = args[++i];
                        break;
                    case "--issue":
                    case "--issue-key":
                    case "--key":
                        if (i + 1 < args.Length) options.IssueKey = args[++i];
                        break;
                    case "--type":
                        if (i + 1 < args.Length) options.IssueType = args[++i];
                        break;
                    case "--summary":
                        if (i + 1 < args.Length) options.Summary = args[++i];
                        break;
                    case "--description":
                    case "--desc":
                        if (i + 1 < args.Length) options.Description = args[++i];
                        break;
                    case "--comment":
                        if (i + 1 < args.Length) options.Comment = args[++i];
                        break;
                    case "--components":
                        if (i + 1 < args.Length) options.Components = args[++i];
                        break;
                    case "--transition":
                    case "--status":
                        if (i + 1 < args.Length) options.TransitionName = args[++i];
                        break;
                    case "--parent":
                        options.LinkToParent = true;
                        break;
                    case "--list-only":
                    case "--list":
                        options.ListOnly = true;
                        break;
                    case "--verbose":
                        // Verbose flag is recognized but currently doesn't do anything
                        break;
                    case "--yes":
                    case "-y":
                        options.SkipConfirmation = true;
                        break;
                    case "--non-interactive":
                    case "--auto":
                        options.NonInteractive = true;
                        options.SkipConfirmation = true; // Non-interactive mode implies skipping confirmation
                        break;
                }
            }

            return options;
        }

        private static void ShowHelp()
        {
            Console.WriteLine("JiraTools - Generic tool for interacting with Jira");
            Console.WriteLine();
            Console.WriteLine("Commands:");
            Console.WriteLine("  create-task           Create a new Jira task");
            Console.WriteLine("  update-task           Update an existing Jira task");
            Console.WriteLine("  add-comment           Add a comment to a Jira task");
            Console.WriteLine("  transition            Transition a Jira task to a new status");
            Console.WriteLine();
            Console.WriteLine("Options:");
            Console.WriteLine("  --help, -h            Show this help message");
            Console.WriteLine($"  --url                 Jira URL (default: {DEFAULT_JIRA_URL})");
            Console.WriteLine("  --user, --username    Jira username (email)");
            Console.WriteLine("  --token, --api-token  Jira API token");
            Console.WriteLine($"  --project             Jira project key (default: {DEFAULT_PROJECT_KEY})");
            Console.WriteLine("  --issue, --key        Issue key for operations on existing tasks");
            Console.WriteLine("  --type                Issue type (default: Task)");
            Console.WriteLine("  --summary             Issue summary/title");
            Console.WriteLine("  --description, --desc Issue description");
            Console.WriteLine("  --comment             Comment text");
            Console.WriteLine("  --components          Comma-separated list of components");
            Console.WriteLine("  --transition, --status Status to transition to");
            Console.WriteLine("  --parent              Link to parent task NCCF-741626");
            Console.WriteLine("  --list-only, --list    For transition: list available transitions without executing");
            Console.WriteLine("  --verbose             Show more detailed output");
            Console.WriteLine();
        }

        private static void LoadCredentialsFromEnvFile(CommandLineOptions options)
        {
            if (!File.Exists(ENV_FILE_PATH))
            {
                Console.WriteLine($"Warning: .env file not found at {ENV_FILE_PATH}");
                return;
            }

            var lines = File.ReadAllLines(ENV_FILE_PATH);
            foreach (var line in lines)
            {
                if (line.StartsWith("#") || string.IsNullOrWhiteSpace(line))
                    continue; // Skip comments and empty lines

                var parts = line.Split(new char[] {'='}, 2);
                if (parts.Length != 2)
                    continue; // Invalid line format

                var key = parts[0].Trim();
                var value = parts[1].Trim().Trim('"');

                switch (key.ToLower())
                {
                    case "jira_url":
                        options.JiraUrl = value;
                        break;
                    case "username":
                    case "jira_username":
                        options.Username = value;
                        break;
                    case "api_token":
                    case "jira_api_token":
                        options.ApiToken = value;
                        break;
                    case "project_key":
                    case "jira_project_key":
                        options.ProjectKey = value;
                        break;
                    case "default_component":
                    case "jira_default_component":
                        options.DefaultComponent = value;
                        if (!string.IsNullOrEmpty(options.DefaultComponent) && string.IsNullOrEmpty(options.Components))
                        {
                            options.Components = options.DefaultComponent;
                            Console.WriteLine($"Using default component from environment: {options.DefaultComponent}");
                        }
                        break;
                    case "epic_key":
                        options.EpicKey = value;
                        break;
                    case "issue_key":
                        options.IssueKey = value;
                        break;
                    case "issue_type":
                        options.IssueType = value;
                        break;
                    case "summary":
                        options.Summary = value;
                        break;
                    case "description":
                        options.Description = value;
                        break;
                    case "comment":
                        options.Comment = value;
                        break;
                    case "components":
                        options.Components = value;
                        break;
                    case "transition_name":
                        options.TransitionName = value;
                        break;
                    case "mapping_file":
                        options.MappingFile = value;
                        break;
                    case "status_doc_path":
                        options.StatusDocPath = value;
                        break;
                    case "link_to_parent":
                        options.LinkToParent = value.Equals("true", StringComparison.OrdinalIgnoreCase);
                        break;
                }
            }
        }

        private static async Task CommentOnTaskInDocument(JiraClient jiraClient, CommandLineOptions options)
        {
            // Default path to the quartz migration status document
            string documentPath = options.StatusDocPath ?? Path.Combine(
                Directory.GetParent(Directory.GetCurrentDirectory()).Parent.Parent.FullName,
                "docs",
                "quartz_migration_status.md");

            if (!File.Exists(documentPath))
            {
                Console.WriteLine($"Error: Status document not found at {documentPath}");
                Console.Write("Enter the path to the status document: ");
                documentPath = Console.ReadLine();
                if (!File.Exists(documentPath))
                {
                    Console.WriteLine($"Error: Document not found at {documentPath}");
                    return;
                }
            }

            // Read the status document
            Console.WriteLine($"Reading status document from: {documentPath}");
            var lines = File.ReadAllLines(documentPath);

            // Find the table header line (contains "| Project | Status |")
            int tableHeaderIndex = -1;
            for (int i = 0; i < lines.Length; i++)
            {
                if (lines[i].Contains("| Project | Status |"))
                {
                    tableHeaderIndex = i;
                    break;
                }
            }

            if (tableHeaderIndex == -1)
            {
                Console.WriteLine("Error: Could not find the status table in the document.");
                return;
            }

            // Check if the table has a Comments column
            if (!lines[tableHeaderIndex].Contains("Comments"))
            {
                Console.WriteLine("Error: The status table doesn't have a Comments column. Please add one first.");
                return;
            }

            // Parse table structure to find column indices
            var headerCells = lines[tableHeaderIndex].Split('|');
            int projectColIndex = -1;
            int jiraTaskColIndex = -1;
            int commentsColIndex = -1;

            for (int i = 0; i < headerCells.Length; i++)
            {
                string cell = headerCells[i].Trim();
                if (cell.Equals("Project", StringComparison.OrdinalIgnoreCase))
                {
                    projectColIndex = i;
                }
                else if (cell.Equals("Jira Task", StringComparison.OrdinalIgnoreCase))
                {
                    jiraTaskColIndex = i;
                }
                else if (cell.Equals("Comments", StringComparison.OrdinalIgnoreCase))
                {
                    commentsColIndex = i;
                }
            }

            if (projectColIndex == -1 || commentsColIndex == -1)
            {
                Console.WriteLine("Error: Could not find the Project or Comments column in the table.");
                return;
            }

            // List available projects
            Console.WriteLine("\nAvailable projects:");
            List<string> projects = new List<string>();
            List<int> projectLineIndices = new List<int>();
            List<string> jiraTasks = new List<string>();

            // Start from the line after the header and separator
            for (int i = tableHeaderIndex + 2; i < lines.Length; i++)
            {
                string line = lines[i];
                if (!line.StartsWith("|") || line.Trim() == "")
                {
                    break; // End of table
                }

                var cells = line.Split('|');
                if (cells.Length > Math.Max(projectColIndex, commentsColIndex))
                {
                    string project = cells[projectColIndex].Trim();
                    projects.Add(project);
                    projectLineIndices.Add(i);

                    // Get Jira task if available
                    string jiraTask = jiraTaskColIndex != -1 && cells.Length > jiraTaskColIndex ?
                        cells[jiraTaskColIndex].Trim() : "N/A";
                    jiraTasks.Add(jiraTask);

                    Console.WriteLine($"{projects.Count}. {project} (Jira: {jiraTask})");
                }
            }

            if (projects.Count == 0)
            {
                Console.WriteLine("No projects found in the status table.");
                return;
            }

            // Select a project
            int selectedProjectIndex = -1;
            if (!string.IsNullOrEmpty(options.ProjectKey))
            {
                bool foundProject = false;
                for (int i = 0; i < projects.Count; i++)
                {
                    if (projects[i].Equals(options.ProjectKey, StringComparison.OrdinalIgnoreCase))
                    {
                        selectedProjectIndex = i;
                        foundProject = true;
                        break;
                    }
                }

                if (!foundProject)
                {
                    Console.WriteLine($"Project '{options.ProjectKey}' not found in the status table.");
                }
            }

            if (selectedProjectIndex == -1)
            {
                Console.Write("\nSelect project (enter number): ");
                if (int.TryParse(Console.ReadLine(), out int selection) && selection > 0 && selection <= projects.Count)
                {
                    selectedProjectIndex = selection - 1;
                }
                else
                {
                    Console.WriteLine("Invalid selection.");
                    return;
                }
            }

            // Get the comment text
            if (string.IsNullOrEmpty(options.Comment))
            {
                Console.Write("Enter comment (press Enter twice to finish): ");
                var comment = new List<string>();
                string line;
                while (!string.IsNullOrEmpty(line = Console.ReadLine()))
                {
                    comment.Add(line);
                }
                options.Comment = string.Join("\n", comment);
            }

            if (string.IsNullOrEmpty(options.Comment))
            {
                Console.WriteLine("Comment is empty. Operation cancelled.");
                return;
            }

            // Update the document with the comment
            int lineToUpdate = projectLineIndices[selectedProjectIndex];
            var rowCells = lines[lineToUpdate].Split('|');

            // Format the comment
            string datePrefix = $"[{DateTime.Now:yyyy-MM-dd}] ";
            string formattedComment = datePrefix + options.Comment.Replace("\n", " ");

            // Update the comments cell
            if (rowCells.Length > commentsColIndex)
            {
                string existingComment = rowCells[commentsColIndex].Trim();
                rowCells[commentsColIndex] = existingComment.Length > 0 ?
                    $" {existingComment}; {formattedComment} " :
                    $" {formattedComment} ";
            }
            else
            {
                // Need to extend the cells array
                var newCells = new string[commentsColIndex + 2]; // +2 because we need one after for the closing |
                Array.Copy(rowCells, newCells, rowCells.Length);
                for (int i = rowCells.Length; i < newCells.Length - 1; i++)
                {
                    newCells[i] = " ";
                }
                newCells[commentsColIndex] = $" {formattedComment} ";
                rowCells = newCells;
            }

            // Reconstruct the line
            lines[lineToUpdate] = string.Join("|", rowCells);

            // Write the updated document
            File.WriteAllLines(documentPath, lines);
            Console.WriteLine($"\nUpdated status document with comment for project '{projects[selectedProjectIndex]}'");

            // If there's an associated Jira task, also add the comment there
            string selectedJiraTask = jiraTasks[selectedProjectIndex];
            if (selectedJiraTask != "N/A" && !string.IsNullOrEmpty(selectedJiraTask) && selectedJiraTask.ToUpper().StartsWith("NCCF-"))
            {
                Console.WriteLine($"\nAdding comment to Jira task {selectedJiraTask}...");
                try
                {
                    // Add a reference to the document in the Jira comment
                    string jiraComment = $"{options.Comment}\n\n_This comment was added via JiraTools from the quartz migration status document._";
                    await jiraClient.AddCommentAsync(selectedJiraTask, jiraComment);
                    Console.WriteLine($"Comment added to Jira task: {options.JiraUrl}/browse/{selectedJiraTask}");
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Warning: Failed to add comment to Jira task: {ex.Message}");
                }
            }
        }
    }

    class CommandLineOptions
    {
        public string JiraUrl { get; set; }
        public string Username { get; set; }
        public string ApiToken { get; set; }
        public string ProjectKey { get; set; }
        public string EpicKey { get; set; }
        public string Command { get; set; }
        public string IssueKey { get; set; }
        public string IssueType { get; set; }
        public string Summary { get; set; }
        public string Description { get; set; }
        public string Comment { get; set; }
        public string Components { get; set; }
        public string DefaultComponent { get; set; }  // Added for environment variable support
        public string TransitionName { get; set; }
        public string MappingFile { get; set; }
        public string StatusDocPath { get; set; }
        public string WorkClassification { get; set; }
        public bool ShowHelp { get; set; }
        public bool LinkToParent { get; set; }
        public bool ListOnly { get; set; }  // Added to support listing transitions without executing them
        public bool SkipConfirmation { get; set; } // Added to support skipping confirmation prompts
        public bool NonInteractive { get; set; } // Added to support non-interactive mode
    }
}
